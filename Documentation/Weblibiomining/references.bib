
@techreport{blomseth_big_1983,
	address = {USA},
	type = {Technical {Report}},
	title = {A {Big} {RISC}},
	abstract = {Big RISC (BRISC) is a high-speed CPU designed with 100K ECL logic and based on the RISC I architecture. Design, performance, and cost of BRISC is presented. Performance is shown to be better than high end mainframes such as the IBM 3081 and Amdahl 470V/8 on integer benchmarks written in C, Pascal and LISP. The cost, conservatively estimated to be \$132,400 is about the same as a high end minicomputer such as the VAX-11/780. BRISC has a CPU cycle time of 46 ns, providing a RISC I instruction execution rate of greater than 15 MIPs. BRISC is designed with a Structured Computer Aided Logic Design System (SCALD) by Valid Logic Systems. An evaluation of the utility of SCALD for computer design is also included.},
	institution = {University of California at Berkeley},
	author = {Blomseth, Richard A.},
	month = jun,
	year = {1983},
	keywords = {BRISC},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\T9GS3NZX\\Blomseth - 1983 - A Big RISC.pdf:application/pdf},
}

@book{slater_guide_1992,
	title = {A {Guide} to {RISC} {Microprocessors}},
	isbn = {978-0-323-13772-0},
	abstract = {A Guide to RISC Microprocessors provides a comprehensive coverage of every major RISC microprocessor family. Independent reviewers with extensive technical backgrounds offer a critical perspective in exploring the strengths and weaknesses of all the different microprocessors on the market. This book is organized into seven sections and comprised of 35 chapters. The discussion begins with an overview of RISC architecture intended to help readers understand the technical details and the significance of the new chips, along with instruction set design and design issues for next-generation processors. The chapters that follow focus on the SPARC architecture, SPARC chips developed by Cypress Semiconductor in collaboration with Sun, and Cypress's introduction of redesigned cache and memory management support chips for the SPARC processor. Other chapters focus on Bipolar Integrated Technology's ECL SPARC implementation, embedded SPARC processors by LSI Logic and Fujitsu, the MIPS processor, Motorola 88000 RISC chip set, Intel 860 and 960 microprocessors, and AMD 29000 RISC microprocessor family. This book is a valuable resource for consumers interested in RISC microprocessors.},
	language = {en},
	publisher = {Academic Press},
	author = {Slater, Florence},
	month = jun,
	year = {1992},
	note = {Google-Books-ID: shqJUaKB9RMC},
	keywords = {Computers / Hardware / Chips \& Processors, Computers / Software Development \& Engineering / General},
}

@misc{raabe_processadores_2006,
	title = {Processadores para {Ensino} de {Conceitos} {Básicos} de {Arquitetura} de {Computadores}},
	url = {https://www.researchgate.net/publication/266878017_Processadores_para_Ensino_de_Conceitos_Basicos_de_Arquitetura_de_Computadores},
	language = {PT-BR},
	publisher = {Workshop sobre Educação em Arquitetura de Computadores},
	author = {Raabe, Andre and Zeferino, Cesar},
	year = {2006},
}

@inproceedings{dimitrijevic_usability_2020,
	address = {Zrenjanin, Serbia},
	title = {Usability {Evaluation} in {Selecting} {Educational} {Technology}},
	isbn = {978-86-7672-341-6},
	url = {https://www.researchgate.net/publication/346403516_Usability_Evaluation_in_Selecting_Educational_Technology},
	language = {English},
	author = {Dimitrijevic, Sonja and Devedzic, Vladan},
	month = oct,
	year = {2020},
}

@book{favero_organizacao_2011,
	address = {Pato Branco},
	title = {Organização e arquitetura de computadores},
	isbn = {978-85-7014-082-1},
	url = {https://redeetec.mec.gov.br/images/stories/pdf/eixo_infor_comun/tec_inf/081112_org_arq_comp.pdf},
	language = {pt-BR},
	publisher = {Edutfpr},
	author = {Fávero, Eliane},
	year = {2011},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\GST8AXAQ\\Fávero - 2011 - Organização e arquitetura de computadores.pdf:application/pdf},
}

@misc{soares_simuladores_2015,
	address = {São Paulo},
	type = {Seminary},
	title = {Simuladores e ferramentas educacionais no ensino de arquitetura de computadores},
	url = {https://www.dcce.ibilce.unesp.br/~aleardo/cursos/arqcomp/Semin_EnsinoArq.pdf},
	language = {Português},
	author = {Soares, Luis},
	year = {2015},
	file = {Simuladores e ferramentas educacionais no ensino de arquitetura de computadores.pdf:C\:\\Users\\diogo\\Zotero\\storage\\AII7BBIA\\Simuladores e ferramentas educacionais no ensino de arquitetura de computadores.pdf:application/pdf},
}

@article{lourenco_ensino_2005,
	title = {Ensino de arquitetura de computadores utilizando simuladores completos},
	issn = {1413-215X},
	url = {https://repositorio.usp.br/item/001458472},
	language = {pt-br},
	urldate = {2024-08-27},
	author = {Lourenço, André Evandro and Midorikawa, Edson Toshimi},
	year = {2005},
	file = {ENSINO DE ARQUITETURA DE COMPUTADORES UTILIZANDO SIMULADORES COMPLETOS.pdf:C\:\\Users\\diogo\\Zotero\\storage\\KSU2XG3I\\ENSINO DE ARQUITETURA DE COMPUTADORES UTILIZANDO SIMULADORES COMPLETOS.pdf:application/pdf},
}

@article{stallings_reduced_1988,
	title = {Reduced instruction set computer architecture},
	volume = {76},
	issn = {1558-2256},
	url = {https://ieeexplore.ieee.org/document/3287},
	doi = {10.1109/5.3287},
	abstract = {A tutorial on the reduced instruction set computer (RISC) approach is presented and the key design issues involved in RISC architecture are highlighted. The results of a number of studies on the instruction execution characteristics of compiled high-level-language programs are examined first. The results of these studies inspired the RISC movement. Approaches to tree key RISC design issues are then summarized: optimized register usage, reduced instruction sets, and pipelining. As examples, an experimental system, the Berkeley RISC and a commercial system, the MIPS R2000, are presented. The advantages and disadvantages of a RISC versus CISC (complex instruction set computer) architecture are also discussed.{\textless}{\textgreater}},
	number = {1},
	urldate = {2024-08-27},
	journal = {Proceedings of the IEEE},
	author = {Stallings, W.},
	month = jan,
	year = {1988},
	keywords = {Computer aided instruction, Computer architecture, Costs, Design optimization, Hardware, Instruction sets, Pipeline processing, Programming profession, Reduced instruction set computing, Registers, RISC-I},
	pages = {38--55},
	file = {Reduced_instruction_set_computer_architecture.pdf:C\:\\Users\\diogo\\Zotero\\storage\\XN6AEN3P\\Reduced_instruction_set_computer_architecture.pdf:application/pdf},
}

@techreport{patterson_vlsi_1982,
	address = {Berkeley},
	type = {Technical {Report}},
	title = {A {VLSI} {RISC}},
	url = {https://digicoll.lib.berkeley.edu/record/136442?ln=en&v=pdf},
	language = {English},
	number = {ERL-m-82-10},
	urldate = {2024-08-27},
	institution = {University of California},
	author = {Patterson, David and Séquin, Carlo},
	month = feb,
	year = {1982},
	keywords = {RISC-I},
	pages = {25},
	file = {A VLSI RISC.pdf:C\:\\Users\\diogo\\Zotero\\storage\\NMN3DBQQ\\A VLSI RISC.pdf:application/pdf},
}

@techreport{patterson_design_1982,
	address = {Berkeley},
	type = {Technical {Report}},
	title = {Design and {Implementation} of {RISC} {I}},
	url = {http://www2.eecs.berkeley.edu/Pubs/TechRpts/1982/5449.html},
	language = {English},
	number = {UCB/CSD-82-106},
	urldate = {2024-08-27},
	institution = {University of California},
	author = {Patterson, David and Séquin, Carlo},
	month = oct,
	year = {1982},
	keywords = {RISC-I},
	pages = {25},
	file = {DESIGN AND IMPLEMENTATION OF RISCI .pdf:C\:\\Users\\diogo\\Zotero\\storage\\5EZA4W5V\\DESIGN AND IMPLEMENTATION OF RISCI .pdf:application/pdf},
}

@techreport{peek_vlsi_1983,
	address = {Berkeley},
	type = {Technical {Report}},
	title = {The {VLSI} {Circuitry} of {RISC} {I}},
	url = {https://www2.eecs.berkeley.edu/Pubs/TechRpts/1983/6347.html},
	abstract = {This paper describes the very large scale integrated circuitry and chip level architecture of RISC I, a Reduced Instruction Set Computer. RISC I is a single chip 32-bit microprocessor, designed with a simple, yet powerful architecture. Its major features include a 3 bus data path, a simple controller, and a 3 phase clock. The RISC I microprocessor, also known as RISC Gold, was implemented as part of the RISC project at the University of California at Berkeley during the winter and spring of 1981. The chip contains 44,500 transistors, and has been fabricated using 4 micron (minimum gate length) NMOS depletion load technology. Testing of the chip has shown that it is operational. It has been demonstrated running small programs.},
	language = {English},
	number = {UCB/CSD-83-135},
	urldate = {2024-08-27},
	institution = {University of California},
	author = {Peek, James},
	month = jun,
	year = {1983},
	keywords = {RISC-I, Extrema Importancia},
	pages = {59},
	file = {The VLSI Circuitry of RISCI .pdf:C\:\\Users\\diogo\\Zotero\\storage\\NUVGSAMK\\The VLSI Circuitry of RISCI .pdf:application/pdf},
}

@article{wolffe_teaching_2002,
	title = {Teaching computer organization/architecture with limited resources using simulators},
	volume = {34},
	issn = {0097-8418},
	url = {https://doi.org/10.1145/563517.563408},
	doi = {10.1145/563517.563408},
	abstract = {As the complexity and variety of computer system hardware increases, its suitability as a pedagogical tool in computer organization/architecture courses diminishes. As a consequence, many instructors are turning to simulators as teaching aids, often using valuable teaching/research time to construct them. Many of these simulators have been made freely available on the Internet, providing a useful and time-saving resource for other instructors. However, finding the right simulator for a particular course or topic can itself be a time-consuming process. The goal of this paper is to provide an easy-to-use survey of free and Internet-accessible computer system simulators as a resource for all instructors of computer organization and computer architecture courses.},
	number = {1},
	urldate = {2024-08-27},
	journal = {SIGCSE Bull.},
	author = {Wolffe, Gregory S. and Yurcik, William and Osborne, Hugh and Holliday, Mark A.},
	month = feb,
	year = {2002},
	pages = {176--180},
	file = {Teaching Compute  OrganizationArchitecture With Limited Resources Using Simulators.pdf:C\:\\Users\\diogo\\Zotero\\storage\\JAK8SJ9T\\Teaching Compute  OrganizationArchitecture With Limited Resources Using Simulators.pdf:application/pdf},
}

@article{yehezkel_three_2001,
	title = {Three simulator tools for teaching computer architecture: {Little} {Man} computer, and {RTLSim}},
	volume = {1},
	issn = {1531-4278},
	shorttitle = {Three simulator tools for teaching computer architecture},
	url = {https://doi.org/10.1145/514144.514732},
	doi = {10.1145/514144.514732},
	abstract = {Teaching computer architecture (at any level) is not an easy task.
To enhance learning, a critical mass of educators has begun using
simulator visualizations of different computer architectures. Here
we present three representative computer architecture simulators
for learning which show that there is a growing consensus for
computer simulation as a teaching tool for complex dynamic
processes, such as underlying computer operations. Simulators also
show the wide spectrum of pedagogical goals for teaching computer
organization and architecture. Specifically, the three simulators
we describe are (1) EasyCPU for the Intel 80x86 family of CPUs; (2)
Little Man Computer for a general von Neumann computer
architecture; and (3) RTLSim, a data path simulator for a MIPS-like
CPU. An appendix is provided for more detailed descriptions of each
simulator.},
	number = {4},
	urldate = {2024-08-27},
	journal = {J. Educ. Resour. Comput.},
	author = {Yehezkel, Cecile and Yurcik, William and Pearson, Murray and Armstrong, Dean},
	month = dec,
	year = {2001},
	pages = {60--80},
	file = {Three Simulator Tools for Teaching Computer Architecture.pdf:C\:\\Users\\diogo\\Zotero\\storage\\39CRZ8MJ\\Three Simulator Tools for Teaching Computer Architecture.pdf:application/pdf},
}

@article{djordjevic_integrated_2000,
	title = {An integrated environment for teaching computer architecture},
	volume = {20},
	issn = {1937-4143},
	url = {https://ieeexplore.ieee.org/document/846311},
	doi = {10.1109/40.846311},
	abstract = {A major problem in teaching computer architecture and organization courses is how to help students make the cognitive leap that connects their theoretical knowledge with practical experience. Numerous researchers involved in computer architecture and organization education have tackled this problem, resulting in a variety of educational tools for computer system simulation. The tools differ greatly in scope, target architecture complexity, simulation level, and user interface. The available educational systems vary in how they handle digital system simulation. They usually offer tools for creating hardware component libraries, viewing simulation results, and conducting statistical analysis of system performance. Available systems range from sophisticated ones, for complex analysis, to simpler ones that are more readily understood by users, both instructors and students. Beyond system simulation, an educational system should support three key objectives. First, it must cover an extensive range of computer architecture and organization topics. Second, it should graphically depict a computer system, from the block level to the register-transfer level. Third, it must provide the means to follow system functions at the program, instruction, and clock cycle levels.},
	number = {3},
	urldate = {2024-08-27},
	journal = {IEEE Micro},
	author = {Djordjevic, J. and Milenkovic, A. and Grbanovic, N.},
	month = may,
	year = {2000},
	keywords = {Computer architecture, Hardware, Analytical models, Computational modeling, Computer science education, Computer simulation, Digital systems, Software libraries, Statistical analysis, User interfaces},
	pages = {66--74},
	file = {An_integrated_environment_for_teaching_computer_architecture.pdf:C\:\\Users\\diogo\\Zotero\\storage\\7NIKQ6DB\\An_integrated_environment_for_teaching_computer_architecture.pdf:application/pdf},
}

@book{patterson_computer_1996,
	address = {San Francisco},
	edition = {2nd ed},
	title = {Computer architecture : a quantitative approach},
	isbn = {978-1-55860-329-5 978-1-55860-372-1},
	shorttitle = {Computer architecture},
	url = {http://archive.org/details/computerarchitec00patt},
	abstract = {Includes bibliographical references and index},
	language = {eng},
	urldate = {2024-08-27},
	publisher = {Morgan Kaufmann Publishers},
	author = {Patterson, David A. and Hennessy, John L.},
	collaborator = {{Internet Archive}},
	year = {1996},
	keywords = {Computer architecture, DLX},
}

@inproceedings{clements_arms_2010,
	title = {{ARMs} for the poor: {Selecting} a processor for teaching computer architecture},
	shorttitle = {{ARMs} for the poor},
	url = {https://ieeexplore.ieee.org/abstract/document/5673541},
	doi = {10.1109/FIE.2010.5673541},
	abstract = {Teachers of computer architecture and organization courses have to choose a target processor to illustrate the basic principles of instruction set design. In this paper we suggest that it is time to choose the ARM processor architecture that is markedly different to those used in most current courses. A specific computer architecture is required as a vehicle to teach about registers, addressing modes, instruction types, and so on. Resorting to a hypothetical teaching machine reduces the student's learning burden and makes their learning curve shallow, but failing to introduce them to the complexities they will encounter in the real world can destroy their motivation. Teachers are concerned not only with covering a body of knowledge; they must motivate students and create a sense of excitement. In a discipline as rapidly changing as computer science, only those students who can adapt to change are likely to thrive over the four or more decades of their career. This paper explains why the ARM architecture is an excellent vehicle for teaching computer architecture; in particular, its predicated execution, inclusion of shifting in all data-processing instructions, and its compressed code (Thumb) mode. Moreover, the ARM has a RISC architecture with some traditional CISC architectural features.},
	urldate = {2024-08-27},
	booktitle = {2010 {IEEE} {Frontiers} in {Education} {Conference} ({FIE})},
	author = {Clements, Alan},
	month = oct,
	year = {2010},
	note = {ISSN: 2377-634X},
	keywords = {Computer architecture, Reduced instruction set computing, Registers, Computer architecture education, Computers, Education, microprocessor instruction sets, Microprocessors, selecting a microprocessor, Thumb},
	pages = {T3E--1--T3E--6},
	file = {ARMs_for_the_poor_Selecting_a_processor_for_teaching_computer_architecture.pdf:C\:\\Users\\diogo\\Zotero\\storage\\9324JMQC\\ARMs_for_the_poor_Selecting_a_processor_for_teaching_computer_architecture.pdf:application/pdf},
}

@article{clements_selecting_1999,
	title = {Selecting a processor for teaching computer architecture},
	volume = {23},
	copyright = {https://www.elsevier.com/tdm/userlicense/1.0/},
	issn = {01419331},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0141933199000496},
	doi = {10.1016/S0141-9331(99)00049-6},
	language = {en},
	number = {5},
	urldate = {2024-08-27},
	journal = {Microprocessors and Microsystems},
	author = {Clements, A.},
	month = oct,
	year = {1999},
	pages = {281--290},
	file = {Selecting a processor for teaching computer architecture.pdf:C\:\\Users\\diogo\\Zotero\\storage\\RMWE5SPC\\Selecting a processor for teaching computer architecture.pdf:application/pdf},
}

@article{patterson_risc_1984,
	title = {{RISC} watch},
	volume = {12},
	issn = {0163-5964},
	url = {https://dl.acm.org/doi/10.1145/641602.641604},
	doi = {10.1145/641602.641604},
	number = {1},
	urldate = {2024-09-02},
	journal = {SIGARCH Comput. Archit. News},
	author = {Patterson, David A.},
	month = mar,
	year = {1984},
	keywords = {RISC II, Floating Point},
	pages = {11--19},
	file = {Full Text PDF:C\:\\Users\\diogo\\Zotero\\storage\\E3589ZSY\\Patterson - 1984 - RISC watch.pdf:application/pdf},
}

@article{daniel_t_fitzpatrick_riscy_1982,
	title = {A {RISCy} approach to {VLSI}},
	volume = {10},
	doi = {10.1145/859520.859524},
	number = {1},
	journal = {ACM Sigarch Computer Architecture News},
	author = {{Daniel T. Fitzpatrick} and Fitzpatrick, Daniel T. and {John Foderaro} and Foderaro, John K. and {Manolis Katevenis} and Katevenis, Manolis and {Howard A. Landman} and Landman, Howard A. and {David A. Patterson} and Patterson, David A. and {James B. Peek} and Peek, James B. and {Zvi Peshkess} and Peshkess, Zvi and {Carlo H. Séquin} and Séquin, Carlo H. and {Robert W. Sherburne} and Sherburne, Robert W. and {Korbin S. Van Dyke} and Van Dyke, Korbin S.},
	month = jan,
	year = {1982},
	doi = {10.1145/859520.859524},
	note = {MAG ID: 2048226925},
	pages = {28--32},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\PJC8JQBN\\Daniel T. Fitzpatrick et al. - 1982 - A RISCy approach to VLSI.pdf:application/pdf},
}

@article{david_a_patterson_reduced_1985,
	title = {Reduced instruction set computers},
	volume = {28},
	doi = {10.1145/2465.214917},
	abstract = {Reduced instruction set computers aim for both simplicity in hardware and synergy between architectures and compilers. Optimizing compilers are used to compile programming languages down to instructions that are as unencumbered as microinstructions in a large virtual address space, and to make the instruction cycle time as fast as possible.},
	number = {1},
	journal = {Communications of The ACM},
	author = {{David A. Patterson}},
	month = jan,
	year = {1985},
	doi = {10.1145/2465.214917},
	note = {MAG ID: 2018426736},
	pages = {8--21},
}

@article{ilan_d_shallom_architectural_1985,
	title = {Architectural concepts of an optimal instruction set selection procedure machine},
	volume = {16},
	doi = {10.1016/0165-6074(85)90048-1},
	journal = {Microprocessing and Microprogramming},
	author = {{Ilan D. Shallom} and Shallom, Ilan D. and {Helnye Azaria} and Azaria, Helnye},
	month = sep,
	year = {1985},
	doi = {10.1016/0165-6074(85)90048-1},
	note = {MAG ID: 2092244337},
	pages = {113--119},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\BEN5AZEV\\Ilan D. Shallom et al. - 1985 - Architectural concepts of an optimal instruction set selection procedure machine.pdf:application/pdf},
}

@article{lee_vlsi_1989,
	title = {A {VLSI} chip set for a multiprocessor workstation. {I}. {An} {RISC} microprocessor with coprocessor interface and support for symbolic processing},
	volume = {24},
	copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
	issn = {00189200},
	url = {http://ieeexplore.ieee.org/document/45007/},
	doi = {10.1109/4.45007},
	number = {6},
	urldate = {2024-09-02},
	journal = {IEEE Journal of Solid-State Circuits},
	author = {Lee, D.D. and Kong, S.I. and Hill, M.D. and Taylor, G.S. and Hodges, D.A. and Katz, R.H. and Patterson, D.A.},
	month = dec,
	year = {1989},
	keywords = {SPUR},
	pages = {1688--1698},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\B93QSRG8\\Lee et al. - 1989 - A VLSI chip set for a multiprocessor workstation. I. An RISC microprocessor with coprocessor interfa.pdf:application/pdf},
}

@article{katevenis_reduced_1985,
	title = {Reduced instruction set computer architectures for {VLSI}},
	abstract = {Integrated circuits offer compact and low-cost implementation of digital systems, and provide performance gains through their high-bandwidth on-chip communication. When this technology is used to build a general-purpose von Neumann processor, it is desirable to integrate as much functionality as possible on a single chip, so as to minimize off-chip communication. Even in Very Large Scale Integrated (VLSI) circuits, however, the transistors available on the limited chip area constitute a scarce resource when used for the implementation of a complete processor or even computer, and thus, they have to be used effectively. This dissertation shows that the recent trend in computer architecture towards instruction sets of increasing complexity leads to inefficient use of those scarce resources. We investigate the alternative of Reduced Instruction Set Computer (RISC) architectures which allow effective use of on-chip transistors in functional units that provide fast access to frequently used operands and instructions. In this dissertation, the nature of general-purpose computations is studied, showing the simplicity of the operations usually performed and the high frequency of operand accesses, many of which are made to the few local scalar variables of procedures. The architecture of the RISC I and II processors is presented. They feature simple instructions and a large multi-window register file, whose overlapping windows are used for holding the arguments and local scalar variables of the most recently activated procedures. In the framework of the RISC project, which has been a large team effort at UC Berkeley for more than three years, a RISC II nMOS single-chip processor was implemented, in collaboration with R. Sherburne. Its microarchitecture is described and evaluated, followed by a discussion of the debugging and testing methods used. Future VLSI technology will allow the integration of larger systems on a single chip. The effective utilization of the additional transistors is considered, and it is proposed that they should be used in implementing specially organized instruction fetch-and-sequence units and data caches. The architectural study and evaluation of RISC II, as well as its design, layout, and testing after fabrication, have shown the viability and the advantages of the RISC approach. The RISC II single-chip processor looks different from other popular commercial processors: it has been less total transistors, it spends only 10\% of the chip area for control rather than one half to two thirds, and it required about five times less design and lay-out effort to get chips that work correctly and at speed on first silicon. And, on top of all that, RISC II executes integer, high level language programs significantly faster than these other processors made in similar technologies.},
	author = {Katevenis, Manolis},
	month = jan,
	year = {1985},
	note = {MAG ID: 2171342458
S2ID: f2e99c1a499176ffe665c9b523080b1ac65665a0},
	keywords = {RISC-I, RISC II, Extrema Importancia},
	file = {Reduced instruction set computer architectures for VLSI.pdf:C\:\\Users\\diogo\\Zotero\\storage\\JZIITFGK\\Reduced instruction set computer architectures for VLSI.pdf:application/pdf},
}

@techreport{sherburne_processor_1984,
	address = {Berkeley},
	type = {Technical {Report}},
	title = {Processor {Design} {Tradeoffs} in {VLSI}},
	url = {http://www2.eecs.berkeley.edu/Pubs/TechRpts/1984/5965.html},
	abstract = {As the density of circuit integration is increased, management of complexity becomes a critical issue in chip design. Hundreds of man-years of design time are required for complex processors which are presently available on a few chips. This high cost of manpower and other resources is not acceptable. In order to address this problem, the Reduced Instruction Set Computer (RISC) architecture relies on a small set of simple instructions which execute in a regular manner. This allows a powerful processor to be implemented on a single chip at a cost of only a few man years. A critical factor be- hind the success of the RISC II microprocessor is the careful optimization on a single chip at a cost of only a few man years A critical factor behind the success of the RISC II microprocessor is the careful optimization which was performed during its design.  Allocation of the limited chip area and power resources must be is the careful optimization which was performed during its design.  Allocation of the limited chip area and power resources must be carefully performed to ensure that all processor instructions operate at the fastest possible speed. A fast implementation alone, however, is not sufficient; the designer must also overall performance for typical applications in order to ensure best results. Areas of processor design which are analyzed in this work include System Pipelining, Local Memory Tradeoffs, Datapath Timing, and ALU Design Tradeoffs. Pipelining improves performance by increasing the utilization of the datapath resources. This gain is diminished, however, by data and instruction dependencies which require extra cycles of delay during instruction execution. Also, the larger register file bitcells which are needed in order to support concurrency in the datapath incur greater delays and reduce system bandwidth from the expected value. Increased local memory (or register file) capacity significantly reduces data I/O traffic by keeping needed data frequently in registers on the chip. Too much local memory, though, can actually reduce system throughput by increasing the datapath cycle time. Various ALU organizations are available to the designer; here several approaches are investigated as to their suitability for VLSI. Carry delay as well as power, area, and regularity issues are examined for ripple, carry-select, and parallel adder designs. First, a traditional, fixed-gate delay analysis of carry computation is performed over a range of adder sizes. Next, delays are measured for NMOS implementations utilizing dynamic logic and bootstrapping techniques. The results differ widely:  the fixed-delay model shows the parallel design to be superior for adders of 16 bits and up, while the NMOS analysis showed it to be outperformed by the carry-select design through 128 bits.  Such a result underscores the need to reevaluate design strategies which were traditionally chosen for TTL-based implementations.  Single-chip VLSI implementations impose a whole new set of It is hoped that this work will bring out the significance of evaluating the design tradeoffs over the whole spectrum ranging from the selection of a processor architecture down to the choice of the carry circuitry in the ALU. In this research I was supported for three years by a General Electric doctoral fellowship. The RISC project was supported in part by ARPA Order No. 3803 and monitored by NESC \#N00039-78-G-0013-0004.},
	language = {English},
	number = {UCB/CSD-84-173},
	institution = {University of California},
	author = {Sherburne, Robert},
	month = apr,
	year = {1984},
	pages = {86},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\SN5VGDVD\\Sherburne - 1984 - Processor Design Tradeoffs in VLSI.pdf:application/pdf},
}

@book{catsoulis_designing_2002,
	address = {Sebastopol, CA},
	edition = {1st ed},
	title = {Designing embedded hardware},
	isbn = {978-0-596-00362-3},
	url = {https://archive.org/details/designing-embedded-hardware/page/n5/mode/1up},
	publisher = {O'Reilly},
	author = {Catsoulis, John},
	year = {2002},
	note = {OCLC: ocm51226672},
	keywords = {Embedded computer systems},
}

@book{monteiro_introducao_2007,
	title = {Introdução À {Organização} {De} {Computadores}},
	isbn = {978-85-216-1543-9},
	language = {pt-BR},
	publisher = {Ltc-Livros Tecnicos E Cientificos Editora Lda},
	author = {Monteiro, Mario},
	month = mar,
	year = {2007},
}

@misc{burch_logisim_2014,
	title = {Logisim {Evolution}},
	url = {https://github.com/logisim-evolution/logisim-evolution},
	urldate = {2024-09-15},
	author = {Burch, Carl and Kluter, Theo and Orlowski, Marcin and Hutchens, David and Walsh, Moshe and Berman, Moshe and Franqueira, Theldo},
	year = {2014},
}

@book{tanenbaum_structured_2013,
	address = {Boston, Mass. Munich},
	edition = {6. ed},
	series = {Always learning},
	title = {Structured computer organization},
	isbn = {978-0-13-291652-3},
	language = {eng},
	publisher = {Pearson},
	author = {Tanenbaum, Andrew S. and Austin, Todd},
	year = {2013},
	file = {Andrew S. Tanenbaum - Structured Computer Organization:C\:\\Users\\diogo\\Zotero\\storage\\J9J78EIS\\Andrew S. Tanenbaum - Structured Computer Organization.pdf:application/pdf},
}

@book{chwif_modelagem_2014,
	edition = {4a},
	title = {Modelagem e simulação de eventos discretos: teoria \& aplicações},
	isbn = {978-85-352-7933-7},
	shorttitle = {Modelagem e simulação de eventos discretos},
	language = {pt-BR},
	publisher = {Elsevier Brasil},
	author = {Chwif, Leonardo},
	collaborator = {Medina, Afonso},
	year = {2014},
	keywords = {Administração e serviços auxiliares},
	file = {msed.pdf:C\:\\Users\\diogo\\Zotero\\storage\\JEQJPKKI\\msed.pdf:application/pdf},
}

@book{malvino_digital_1993,
	address = {Lake Forest, Ill.},
	edition = {3. ed},
	title = {Digital computer electronics},
	isbn = {978-0-02-800594-2 978-0-07-462235-3},
	language = {eng},
	publisher = {Glencoe},
	author = {Malvino, Albert Paul and Brown, Jerald A.},
	year = {1993},
	file = {Table of Contents PDF:C\:\\Users\\diogo\\Zotero\\storage\\TRTEAFZQ\\Malvino et al. - 1993 - Digital computer electronics.pdf:application/pdf},
}

@misc{santos_didactic-risc-i_2024,
	title = {Didactic-{RISC}-{I}},
	url = {https://github.com/Diogo-Valadares/Didactic-RISC-I},
	urldate = {2024-10-08},
	author = {Santos, Diogo},
	year = {2024},
}

@misc{noauthor_intel_nodate,
	title = {Intel 4004 {Instructions} {Set}},
	url = {http://e4004.szyc.org/iset.html},
	urldate = {2024-10-10},
	file = {Intel 4004 Instructions Set:C\:\\Users\\diogo\\Zotero\\storage\\6X6GDXRA\\iset.html:text/html},
}

@article{popovic_application_2018,
	title = {Application of social game context to teaching mutual exclusion},
	volume = {59},
	issn = {0005-1144, 1848-3380},
	url = {https://www.tandfonline.com/doi/full/10.1080/00051144.2018.1522462},
	doi = {10.1080/00051144.2018.1522462},
	language = {en},
	number = {2},
	urldate = {2024-11-26},
	journal = {Automatika},
	author = {Popović, Miroslav and Vladimir, Klemo and Šilić, Marin},
	month = apr,
	year = {2018},
	pages = {208--219},
	file = {Full Text:C\:\\Users\\diogo\\Zotero\\storage\\99FCP9S7\\Popović et al. - 2018 - Application of social game context to teaching mutual exclusion.pdf:application/pdf},
}

@article{coe_interactive_1996,
	title = {An interactive environment for the teaching of computer architecture},
	volume = {24},
	issn = {0163-5735},
	url = {https://dl.acm.org/doi/10.1145/1013718.237518},
	doi = {10.1145/1013718.237518},
	language = {en},
	number = {1-3},
	urldate = {2024-11-26},
	journal = {ACM SIGCUE Outlook},
	author = {Coe, P. S. and Williams, L. M. and Ibbett, R. N.},
	month = jan,
	year = {1996},
	pages = {33--35},
	file = {Full Text:C\:\\Users\\diogo\\Zotero\\storage\\8TFAWBDG\\Coe et al. - 1996 - An interactive environment for the teaching of computer architecture.pdf:application/pdf},
}

@article{cifredochacon_computer_2015,
	title = {Computer architecture and {FPGAs}: {A} learning‐by‐doing methodology for digital‐native students},
	volume = {23},
	copyright = {http://onlinelibrary.wiley.com/termsAndConditions\#vor},
	issn = {1061-3773, 1099-0542},
	shorttitle = {Computer architecture and {FPGAs}},
	url = {https://onlinelibrary.wiley.com/doi/10.1002/cae.21617},
	doi = {10.1002/cae.21617},
	abstract = {ABSTRACT
            
              
              
                The theoretical teaching of Computer Architecture is not suitable longer. In the present time, students claim for a learning‐by‐doing according to their dynamic and active character. Nowadays, interactive teaching is possible thanks to the decrease in the prices of the Field Programmable Gate Arrays. This paper proposes a learning‐by‐doing methodology to teach Computer Architecture to first‐year student who belong to a digital‐native generation. The method consists in developing a whole computer from scratch while they are introduced to hardware description languages (HDL) and programmable logic devices. Firstly, students design each and every element of the computer by VHDL language. Later on, they interconnect the verified elements and test the complete computer. A FPGA‐based board is needed to implement and check the correct performance of the designed computer. This educational approach is intended to be used with first‐year students from Computer Engineering Degree, thus, it is the first experience of the students with the basics of Computer Architecture. Students have a computer and a FPGA‐based board in anytime. In the final exam, a design of a different computer is propounded. Computer testing and programming is a requirement to pass. The high percentage of passed students corroborated the success of the methodology. Thus, computer functioning and construction is understood by a hands‐on methodology at the same time as VHDL language and FPGA technology are introduced. Lack attention is avoided since students keep a dynamic role working with their personal computer and FPGA at all times. © 2015 Wiley Periodicals, Inc. Comput Appl Eng Educ 23:464–470, 2015; View this article online at
                wileyonlinelibrary.com/journal/cae
                ; DOI
                10.1002/cae.21617},
	language = {en},
	number = {3},
	urldate = {2024-11-26},
	journal = {Computer Applications in Engineering Education},
	author = {Cifredo‐Chacón, Mª De Los Ángeles and Quirós‐Olozábal, Ángel and Guerrero‐Rodríguez, José María},
	month = may,
	year = {2015},
	keywords = {fpga},
	pages = {464--470},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\AD52KM4M\\Cifredo‐Chacón et al. - 2015 - Computer architecture and FPGAs A learning‐by‐doing methodology for digital‐native students.pdf:application/pdf},
}

@article{styer_design_1994,
	title = {On the design and use of a simulator for teaching computer architecture},
	volume = {26},
	issn = {0097-8418},
	url = {https://dl.acm.org/doi/10.1145/187387.187404},
	doi = {10.1145/187387.187404},
	abstract = {Most Computer Architecture classes include dicussions of machine instructions and CPU internals, but not many include input/output devices, either as part of that course, or elsewhere in the program. This paper discusses a simulator designed to allow students to work with simulated I/O devices as a part of larger machine simulator.},
	language = {en},
	number = {3},
	urldate = {2024-11-26},
	journal = {ACM SIGCSE Bulletin},
	author = {Styer, Eugene},
	month = sep,
	year = {1994},
	pages = {45},
	file = {Full Text:C\:\\Users\\diogo\\Zotero\\storage\\H7EJ4D7T\\Styer - 1994 - On the design and use of a simulator for teaching computer architecture.pdf:application/pdf},
}

@article{nikolic_survey_2009,
	title = {A {Survey} and {Evaluation} of {Simulators} {Suitable} for {Teaching} {Courses} in {Computer} {Architecture} and {Organization}},
	volume = {52},
	copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
	issn = {0018-9359, 1557-9638},
	url = {http://ieeexplore.ieee.org/document/4967893/},
	doi = {10.1109/TE.2008.930097},
	number = {4},
	urldate = {2024-11-27},
	journal = {IEEE Transactions on Education},
	author = {Nikolic, Bosko and Radivojevic, Zaharije and Djordjevic, Jovan and Milutinovic, Veljko},
	month = nov,
	year = {2009},
	pages = {449--458},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\AC5QFD4F\\Nikolic et al. - 2009 - A Survey and Evaluation of Simulators Suitable for Teaching Courses in Computer Architecture and Org.pdf:application/pdf},
}

@article{patti_supporting_2012,
	title = {Supporting {Undergraduate} {Computer} {Architecture} {Students} {Using} a {Visual} {MIPS64} {CPU} {Simulator}},
	volume = {55},
	copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
	issn = {0018-9359, 1557-9638},
	url = {http://ieeexplore.ieee.org/document/6122467/},
	doi = {10.1109/TE.2011.2180530},
	number = {3},
	urldate = {2024-11-27},
	journal = {IEEE Transactions on Education},
	author = {Patti, Davide and Spadaccini, Andrea and Palesi, Maurizio and Fazzino, Fabrizio and Catania, Vincenzo},
	month = aug,
	year = {2012},
	pages = {406--411},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\EJIJADQL\\Patti et al. - 2012 - Supporting Undergraduate Computer Architecture Students Using a Visual MIPS64 CPU Simulator.pdf:application/pdf},
}

@article{al-aubidy_teaching_2007,
	title = {Teaching {Computer} {Organization} and {Architecture} {Using} {Simulation} and {FPGA} {Applications}},
	volume = {3},
	issn = {15493636},
	url = {http://www.thescipub.com/abstract/?doi=jcssp.2007.624.632},
	doi = {10.3844/jcssp.2007.624.632},
	number = {8},
	urldate = {2024-11-27},
	journal = {Journal of Computer Science},
	author = {Al-Aubidy, Dr. Kasim M.},
	month = aug,
	year = {2007},
	keywords = {fpga},
	pages = {624--632},
	file = {Submitted Version:C\:\\Users\\diogo\\Zotero\\storage\\MR6MFE86\\Al-Aubidy - 2007 - Teaching Computer Organization and Architecture Using Simulation and FPGA Applications.pdf:application/pdf},
}

@article{calazans_integrating_2001,
	title = {Integrating the teaching of computer organization and architecture with digital hardware design early in undergraduate courses},
	volume = {44},
	copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
	issn = {00189359},
	url = {http://ieeexplore.ieee.org/document/925805/},
	doi = {10.1109/13.925805},
	number = {2},
	urldate = {2024-11-28},
	journal = {IEEE Transactions on Education},
	author = {Calazans, N.L.V. and Moraes, F.G.},
	month = may,
	year = {2001},
	pages = {109--119},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\WG3GMKBB\\Calazans and Moraes - 2001 - Integrating the teaching of computer organization and architecture with digital hardware design earl.pdf:application/pdf},
}

@article{prasad_using_2016,
	title = {Using simulators for teaching computer organization and architecture},
	volume = {24},
	copyright = {http://onlinelibrary.wiley.com/termsAndConditions\#vor},
	issn = {1061-3773, 1099-0542},
	url = {https://onlinelibrary.wiley.com/doi/10.1002/cae.21699},
	doi = {10.1002/cae.21699},
	abstract = {ABSTRACT
            
              
              
                An important problem in teaching the subjects of Computer Architecture and Organization (CO\&CA) is the linking of the theoretical knowledge with the practical experience. Visualization of different computer hardware architectures with the use of the simulators enhances the learning process among students. Many useful computer simulators can help address this issue by covering various aspects of CO\&CA. The programs range from simple simulators to specific teaching tools to advanced and specialized software. We assessed several simulators and selected one that was freely available and that enabled the students to learn the concepts to the fullest. This paper describes our experience of incorporating simulation tools into teaching the CO\&CA to information technology and computing students. We demonstrate that the use of simulators helped students understand better how a computer was constructed and how it functioned internally. © 2015 Wiley Periodicals, Inc. Comput Appl Eng Educ 24:215–224, 2016; View this article online at
                wileyonlinelibrary.com/journal/cae
                ; DOI
                10.1002/cae.21699},
	language = {en},
	number = {2},
	urldate = {2024-11-28},
	journal = {Computer Applications in Engineering Education},
	author = {Prasad, P. W. C. and Alsadoon, Abeer and Beg, Azam and Chan, Anthony},
	month = mar,
	year = {2016},
	pages = {215--224},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\2RANTFNF\\Prasad et al. - 2016 - Using simulators for teaching computer organization and architecture.pdf:application/pdf},
}

@article{henderson_animated_1994,
	title = {Animated models for teaching aspects of computer systems organization},
	volume = {37},
	copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
	issn = {00189359},
	url = {http://ieeexplore.ieee.org/document/312133/},
	doi = {10.1109/13.312133},
	number = {3},
	urldate = {2024-11-28},
	journal = {IEEE Transactions on Education},
	author = {Henderson, W.D.},
	month = aug,
	year = {1994},
	pages = {247--256},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\68NMU7FE\\Henderson - 1994 - Animated models for teaching aspects of computer systems organization.pdf:application/pdf},
}

@misc{arm_arm_2014,
	title = {{ARM} {Cortex}-{A} {Series} {Programmer}'s {Guide} for {ARMv7}-{A}},
	shorttitle = {{ARM} documentation},
	url = {https://developer.arm.com/documentation/den0013/d},
	language = {English},
	urldate = {2024-11-30},
	journal = {ARM Developer},
	author = {{ARM}},
	month = jan,
	year = {2014},
	file = {ARM Cortex-A Series Programmer's Guide for ARMv7-A:C\:\\Users\\diogo\\Zotero\\storage\\M3PTS9IX\\d.html:text/html},
}

@book{intel_corporation_asm86_1983,
	title = {{ASM86} {LANGUAGE} {REFERENCE} {MANUAL}},
	language = {English},
	publisher = {Intel Corporation},
	author = {{Intel Corporation}},
	year = {1983},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\XMWME7T2\\Intel Corporation - 1983 - ASM86 LANGUAGE REFERENCE MANUAL.pdf:application/pdf},
}

@book{risc-v_risc-v_2024,
	edition = {Version 20240411},
	title = {The {RISC}-{V} {Instruction} {Set}  {Manual}},
	volume = {1-2},
	url = {https://riscv.org/technical/specifications/},
	language = {English},
	publisher = {RISC-V},
	author = {{RISC-V}},
	year = {2024},
	file = {priv-isa-asciidoc_20240411:C\:\\Users\\diogo\\Zotero\\storage\\VJMZ5AYT\\priv-isa-asciidoc_20240411.pdf:application/pdf;unpriv-isa-asciidoc_20240411:C\:\\Users\\diogo\\Zotero\\storage\\UUF9CSV5\\unpriv-isa-asciidoc_20240411.pdf:application/pdf},
}

@book{mips_tech_llc_mips32_2016,
	edition = {6},
	title = {{MIPS32} {Architecture} {For} {Programmers}},
	volume = {1-2},
	copyright = {Wave Computing},
	author = {{MIPS Tech LLC}},
	month = dec,
	year = {2016},
	file = {mips32-r6-2a:C\:\\Users\\diogo\\Zotero\\storage\\GCSWBJ2F\\mips32-r6-2a.pdf:application/pdf;PDF:C\:\\Users\\diogo\\Zotero\\storage\\4I6JBMBM\\mips32-r6-1a.pdf:application/pdf},
}

@book{intel_corporation_intel_2024,
	title = {Intel® 64 and {IA}-32 {Architectures} {Software} {Developer}’s {Manual}},
	volume = {1, 2A, 2B, 2C, 2D, 3A, 3B, 3C, 3D, and 4},
	copyright = {Intel Corporation},
	url = {https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html},
	language = {English},
	author = {{Intel Corporation}},
	month = oct,
	year = {2024},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\3UPPAEXZ\\Intel Corporation - 2024 - Intel® 64 and IA-32 Architectures Software Developer’s Manual.pdf:application/pdf},
}

@book{noauthor_notitle_nodate,
}

@book{sparc_international_inc_sparc_1994,
	address = {Englewood Cliffs, NJ},
	edition = {Version 9},
	title = {The {SPARC} architecture manual},
	isbn = {978-0-13-825001-0},
	language = {en},
	publisher = {Prentice Hall},
	author = {{SPARC International Inc}},
	year = {1994},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\ELXGUI2W\\SPARC International Inc - 1992 - The SPARC architecture manual.pdf:application/pdf},
}

@article{noauthor_intel_2024,
	title = {Intel® 64 and {IA}-32 {Architectures} {Software} {Developer}’s {Manual} {Combined} {Volumes}: 1, {2A}, {2B}, {2C}, {2D}, {3A}, {3B}, {3C}, {3D}, and 4},
	language = {en},
	year = {2024},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\8YUMPUCG\\2024 - Intel® 64 and IA-32 Architectures Software Developer’s Manual Combined Volumes 1, 2A, 2B, 2C, 2D, 3.pdf:application/pdf},
}

@article{noauthor_risc-v_nodate,
	title = {The {RISC}-{V} {Instruction} {Set} {Manual}: {Volume} {II}: {Privileged} {Architecture}},
	language = {en},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\AWDNIEPQ\\The RISC-V Instruction Set Manual Volume II Privileged Architecture.pdf:application/pdf},
}

@article{noauthor_risc-v_nodate-1,
	title = {The {RISC}-{V} {Instruction} {Set} {Manual} {Volume} {I}: {Unprivileged} {Architecture}},
	language = {en},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\DYENCYTK\\The RISC-V Instruction Set Manual Volume I Unprivileged Architecture.pdf:application/pdf},
}

@techreport{patterson_risc-v_2016,
	address = {Berkeley},
	type = {Technical {Report}},
	title = {{RISC}-{V} {Geneology}},
	url = {https://www2.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-6.pdf},
	language = {English},
	number = {UCB/EECS-2016-6},
	institution = {University of California},
	author = {Patterson, David A. and Chen, Tony},
	month = jan,
	year = {2016},
	pages = {8},
	file = {EECS-2016-6:C\:\\Users\\diogo\\Zotero\\storage\\TFAFAJMY\\EECS-2016-6.pdf:application/pdf},
}

@article{michel_quantitative_2011,
	title = {Quantitative {Analysis} of {Culture} {Using} {Millions} of {Digitized} {Books}},
	volume = {331},
	copyright = {http://www.sciencemag.org/site/feature/contribinfo/prep/license.xhtml},
	issn = {0036-8075, 1095-9203},
	url = {https://www.science.org/doi/10.1126/science.1199644},
	doi = {10.1126/science.1199644},
	abstract = {Linguistic and cultural changes are revealed through the analyses of words appearing in books.
          , 
            We constructed a corpus of digitized texts containing about 4\% of all books ever printed. Analysis of this corpus enables us to investigate cultural trends quantitatively. We survey the vast terrain of ‘culturomics,’ focusing on linguistic and cultural phenomena that were reflected in the English language between 1800 and 2000. We show how this approach can provide insights about fields as diverse as lexicography, the evolution of grammar, collective memory, the adoption of technology, the pursuit of fame, censorship, and historical epidemiology. Culturomics extends the boundaries of rigorous quantitative inquiry to a wide array of new phenomena spanning the social sciences and the humanities.},
	language = {en},
	number = {6014},
	urldate = {2024-12-02},
	journal = {Science},
	author = {Michel, Jean-Baptiste and Shen, Yuan Kui and Aiden, Aviva Presser and Veres, Adrian and Gray, Matthew K. and {The Google Books Team} and Pickett, Joseph P. and Hoiberg, Dale and Clancy, Dan and Norvig, Peter and Orwant, Jon and Pinker, Steven and Nowak, Martin A. and Aiden, Erez Lieberman},
	month = jan,
	year = {2011},
	pages = {176--182},
	file = {Accepted Version:C\:\\Users\\diogo\\Zotero\\storage\\HQ3PJNIG\\Michel et al. - 2011 - Quantitative Analysis of Culture Using Millions of Digitized Books.pdf:application/pdf},
}

@article{costa_modelo_2010,
	title = {Modelo para webibliomining: proposta e caso de aplicação},
	volume = {13},
	author = {Costa, Helder},
	year = {2010},
	pages = {115--126},
}

@misc{patterson_how_2017,
	title = {How close is {RISC}-{V} to {RISC}-{I}? {\textbar} {ASPIRE}},
	shorttitle = {How close is {RISC}-{V} to {RISC}-{I}?},
	url = {https://aspire.eecs.berkeley.edu/2017/06/how-close-is-risc-v-to-risc-i/},
	language = {en-US},
	urldate = {2024-12-02},
	author = {Patterson, David},
	month = jun,
	year = {2017},
	file = {Snapshot:C\:\\Users\\diogo\\Zotero\\storage\\NI9M5HCL\\how-close-is-risc-v-to-risc-i.html:text/html},
}

@article{lin_syntactic_2012,
	title = {Syntactic {Annotations} for the {Google} {Books} {NGram} {Corpus}},
	doi = {10.5555/2390470.2390499},
	abstract = {We present a new edition of the Google Books Ngram Corpus, which describes how often words and phrases were used over a period of ﬁve centuries, in eight languages; it reﬂects 6\% of all books ever published. This new edition introduces syntactic annotations: words are tagged with their part-of-speech, and headmodiﬁer relationships are recorded. The annotations are produced automatically with statistical models that are speciﬁcally adapted to historical text. The corpus will facilitate the study of linguistic trends, especially those related to the evolution of syntax.},
	language = {en},
	author = {Lin, Yuri and Michel, Jean-Baptiste and Lieberman, Erez Aiden and Orwant, Jon and Brockman, Will and Petrov, Slav},
	month = jul,
	year = {2012},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\BZLYR6TZ\\Lin et al. - Syntactic Annotations for the Google Books NGram Corpus.pdf:application/pdf},
}

@techreport{hill_spur_1985,
	address = {Berkeley},
	type = {Technical {Report}},
	title = {{SPUR}: {A} {VLSI} {Multiprocessor} {Workstation}},
	abstract = {SPUR (Symbolic Processing Using RISCs) is a workstation for conducting parallel processing research. SPUR contains 6 to 12 high-performance homogeneous processors connected with a shared bus. The number of processors is large enough to permit parallel processing experiments, but small enough to allow packaging as a personal workstation. The restricted processor count also allows us to build powerful RISC processors, which include support for Lisp and IEEE floating-point, at reasonable cost. This paper presents a specification of SPUR and the results of some early architectural experiments. SPUR features include a large virtually-tagged cache, address translation without a translation buffer, LISP support with datatype tags but without microcode, multiple cache consistency in hardware, and an IEEE floating-point coprocessor without microcode. KEY WORDS AND PHRASES: Address Translation, Cache, Cache Consistency, IEEE Floating-point, Lisp, Multiprocessor, RISC, Shared-Bus, Tagged Architecture.},
	language = {en},
	number = {UCB/CSD 86/273},
	institution = {University of California},
	author = {Hill, M. D. and Eggers, S. J. and Larus, J. R. and Taylor, G. S. and Adams, G. and Bose, B. K. and Gibson, G. A. and Hansen, P. M. and Keller, J. and Kong, S. I. and Lee, C. G. and Lee, D. and Pendleton, J. M. and Ritchie, S. A. and Wood, D. A. and Zorn, B. G. and Hilfinger, D. A. and Hodges, R. H. and Katz, R. H. and Ousterhou, J. and Patterson, D. A.},
	month = dec,
	year = {1985},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\XTNCSJLR\\Hill and Eggers - SPUR A VLSI Multiprocessor Workstation.pdf:application/pdf},
}

@techreport{samples_soar_1985,
	address = {Berkeley},
	type = {Technical {Report}},
	title = {{SOAR} {Architecture}},
	url = {https://www2.eecs.berkeley.edu/Pubs/TechRpts/1985/5940.html},
	number = {UCB/CSD-85-226},
	institution = {University of California},
	author = {Samples, A. Dain and Klein, Mike and Foley, Pete},
	year = {1985},
	file = {CSD-85-226:C\:\\Users\\diogo\\Zotero\\storage\\65INCWD5\\CSD-85-226.pdf:application/pdf},
}

@misc{shvets_cpu-world_nodate,
	title = {{CPU}-{World}: {Microprocessors} / {CPUs}},
	url = {https://www.cpu-world.com/CPUs/CPU.html},
	urldate = {2024-12-04},
	journal = {CPU-World},
	author = {Shvets, Gennadiy},
	file = {CPU-World\: Microprocessors / CPUs:C\:\\Users\\diogo\\Zotero\\storage\\95XGRDSB\\CPU.html:text/html},
}

@article{costa_powerpc_2011,
	title = {{PowerPC} – {A} {História} de {Produção} de {Chips} da {IBM}},
	language = {pt},
	author = {Costa, Filipe de Oliveira and Bernardo, Ivelize Rocha},
	month = jun,
	year = {2011},
	file = {PDF:C\:\\Users\\diogo\\Zotero\\storage\\WYIGKSQK\\Costa and Bernardo - PowerPC – A História de Produção de Chips da IBM.pdf:application/pdf},
}

@misc{arm_building_nodate,
	title = {Building the {Future} of {Computing}},
	url = {https://www.arm.com/},
	abstract = {Together with its vast ecosystem, Arm technology is changing the world again, building the future of computing \& bringing ideas to life.},
	language = {en},
	urldate = {2024-12-28},
	journal = {Arm {\textbar} The Architecture for the Digital World},
	author = {{ARM}},
	file = {Snapshot:C\:\\Users\\diogo\\Zotero\\storage\\MUYV9ZFY\\www.arm.com.html:text/html},
}

@misc{turley_wait_2021,
	title = {Wait, {What}? {MIPS} {Becomes} {RISC}-{V}},
	shorttitle = {Wait, {What}?},
	url = {https://www.eejournal.com/article/wait-what-mips-becomes-risc-v/},
	abstract = {What a long, strange trip it’s been. MIPS Technologies no longer designs MIPS processors. Instead, it’s joined the RISC-V camp, abandoning its eponymous architecture for one that has strong histori…},
	language = {en-US},
	urldate = {2025-01-06},
	journal = {EEJournal},
	author = {Turley, Jim},
	month = mar,
	year = {2021},
	keywords = {MIPS},
	file = {Snapshot:C\:\\Users\\diogo\\Zotero\\storage\\HIMBQIDT\\wait-what-mips-becomes-risc-v.html:text/html},
}

@article{vollmar_mips_2005,
	title = {A {MIPS} assembly language simulator designed for education},
	url = {https://bearworks.missouristate.edu/articles-cnas/1039},
	journal = {Journal of Computing Sciences in Colleges},
	author = {Vollmar, Kenneth and Sanderson, Pete},
	month = jan,
	year = {2005},
	file = {"A MIPS assembly language simulator designed for education" by Kenneth R. Vollmar and Pete Sanderson:C\:\\Users\\diogo\\Zotero\\storage\\K6RWDYLK\\1039.html:text/html},
}
